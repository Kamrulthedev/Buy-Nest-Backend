// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(uuid())
  name               String
  email              String     @unique
  password           String
  contactNumber      String
  role               UserRole
  profilePhoto       String?
  needPasswordChange Boolean    @default(true)
  status             UserStatus @default(ACTIVE)
  lastLogin          DateTime?  @default(now())
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  admin              Admin?
  vendor             Vendor?
  customer           Customer?

  cart  Cart[]
  Order Order[]

  @@map("users")
}

model Admin {
  id            String     @id @default(uuid())
  name          String
  email         String     @unique
  role          UserRole   @default(ADMIN)
  profilePhoto  String?
  address       String?
  contactNumber String
  status        UserStatus @default(ACTIVE)
  isDeleted     Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  user          User       @relation(fields: [email], references: [email])

  @@map("admins")
}

model Customer {
  id            String     @id @unique @default(uuid())
  email         String     @unique
  name          String
  role          UserRole   @default(CUSTOMER)
  profilePhoto  String?
  contactNumber String?
  address       String?
  status        UserStatus @default(ACTIVE)
  isDeleted     Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  user          User       @relation(references: [email], fields: [email])

  Review Review[]
  Order  Order[]
  Follow Follow[]
}

model Vendor {
  id            String     @id @default(uuid())
  name          String
  email         String     @unique
  role          UserRole   @default(VENDOR)
  profilePhoto  String?
  contactNumber String
  address       String?
  status        UserStatus @default(ACTIVE)
  isDeleted     Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  user          User       @relation(fields: [email], references: [email])

  shopId String?
  shop   Shop?

  @@map("vendors")
}

model Shop {
  id          String   @id @default(uuid())
  name        String
  description String?
  logoUrl     String?
  vendorId    String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  vendor Vendor @relation(fields: [vendorId], references: [id])

  products  Product[]
  orders    Order[]
  followers Follow[]
  cart      Cart[]
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  discount    Float    @default(0.0)
  stock       Int      @default(0)
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  category    Category @default(ELECTRONICS)

  shopId String

  shop       Shop        @relation(fields: [shopId], references: [id])
  reviews    Review[]
  orderItems OrderItem[]
  cartItems  CartItem[]
}

model Follow {
  id         String   @id @default(uuid())
  customerId String
  shopId     String
  createdAt  DateTime @default(now())

  customer Customer @relation(fields: [customerId], references: [id])
  shop     Shop     @relation(fields: [shopId], references: [id])

  @@unique([customerId, shopId])
}

model Order {
  id         String      @id @default(uuid())
  totalPrice Float
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  userId String
  shopId String

  user       User        @relation(fields: [userId], references: [id])
  shop       Shop        @relation(fields: [shopId], references: [id])
  items      OrderItem[]
  Customer   Customer?   @relation(fields: [customerId], references: [id])
  customerId String?
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  customerId String
  productId  String

  customer Customer @relation(fields: [customerId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])
}

model Cart {
  id        String   @id @default(uuid())
  userId    String
  shopId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User       @relation(fields: [userId], references: [id])
  shop  Shop       @relation(fields: [shopId], references: [id])
  items CartItem[]

  @@unique([userId, shopId])
}

model CartItem {
  id        String @id @default(uuid())
  cartId    String
  productId String
  quantity  Int    @default(1)

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

enum UserRole {
  ADMIN
  VENDOR
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  PAID
  UNPAID
}

enum Category {
  ELECTRONICS
  FASHION
  HOME_APPLIANCES
  BOOKS
  BEAUTY_AND_PERSONAL_CARE
  SPORTS_AND_OUTDOORS
  TOYS_AND_GAMES
  GROCERY_AND_GOURMET
  AUTOMOTIVE
  HEALTH_AND_WELLNESS
  FURNITURE
  BABY_PRODUCTS
}
